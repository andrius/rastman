#!/usr/bin/env ruby
# $Id$

require "optparse"
require "ostruct"
require "yaml"
require "rubygems"
require "rastman"

CMD = File.basename(__FILE__)

class CmdLine

  def self.parse(args, opts)
    # set default options
    opts[:login] ||= "username"
    opts[:pwd] ||= "secret"
    opts[:host] ||= "localhost"
    opts[:recipient] ||= "1234567890@example.com"
    opts[:context] ||= "default"
    opts[:exten] ||= "987"
    opts[:rounds] ||= 1
    opts[:rounds_delay] ||= 20
    opts[:calls] ||= 1
    opts[:calls_delay] ||= 1
    opts[:view_events] = false if opts[:view_events].nil?
    opts[:rc] = false
    
    o = OptionParser.new do |o|
      o.banner = "Usage: #{CMD} [options]"
      o.separator ""
      o.separator "Options:"

      o.on("-l", "--login <login>",
        String,
        "Login to use from .../etc/manager.conf (default: #{opts[:login]})") do |login|
        opts[:login] = login
      end

      o.on("-p", "--pwd <password>",
        String,
        "Password as declared in .../etc/manager.conf (default: #{opts[:pwd]})") do |pwd|
        opts[:pwd] = pwd
      end

      o.on("-h", "--host <asterisk host name>",
        String,
        "Host name running the Asterisk server (default: #{opts[:host]})") do |host|
        opts[:host] = host
      end

      o.on("-r", "--recipient <URI>",
        String,
        "Recipient URI (default: #{opts[:recipient]})") do |recipient|
        opts[:recipient] = recipient
      end

      o.on("-c", "--context <context>",
        String,
        "Dialplan Context to connect the call to (default: #{opts[:context]})") do |context|
        opts[:context] = context
      end

      o.on("-e", "--exten <extension>",
        String,
        "Dialplan Extension to connect the call to (default: #{opts[:exten]})") do |exten|
        opts[:exten] = exten
      end

      o.on("-n", "--num-rounds <number>",
        Integer,
        "Number of rounds of call generation to make (default: #{opts[:rounds]})") do |rounds|
        opts[:rounds] = rounds
      end

      o.on("-d", "--rounds-delay <delay>",
        Float,
        "Number of seconds between two rounds (default: #{opts[:rounds_delay]})") do |delay|
        opts[:rounds_delay] = delay
      end

      o.on("-a", "--num-calls <number>",
        Integer,
        "Number of rounds of call generation to make (default: #{opts[:calls]})") do |calls|
        opts[:calls] = calls
      end

      o.on("-t", "--calls-delay <delay>",
        Float,
        "Number of seconds between two calls (default: #{opts[:calls_delay]})") do |delay|
        opts[:calls_delay] = delay
      end

      o.on("-v", "--view-events",
        "View events generated by Asterisk (default: #{opts[:view_events]})") do |view_events|
        opts[:view_events] = view_events
      end

      o.on("-m", "--[no-]make-rc",
        "Save options in $HOME/.rastman_mkcallsrc instead of generating calls") do |rc|
        opts[:rc] = rc
      end

      o.on_tail("-?", "--help", "Show this message") do
        puts o
        exit
      end

      o.parse!(args)
    end
    opts
  end

end

# retrieve default parameters if resource file exists
rc_options, rc_file = {}, File.join(ENV["HOME"], ".rastman_mkcallsrc")
rc_options = YAML::load(File.read(rc_file)) if File.exists?(rc_file)

# parse command line
opts = CmdLine.parse(ARGV, rc_options)

# save resource file if asked for
if opts[:rc] == true
  opts.delete(:rc)
  File.open(rc_file, "w") { |f| f.write(YAML::dump(opts)) }
  puts "#{CMD}: options saved in #{rc_file}."
  exit
end

cmdr = Rastman::Manager.new(opts[:login], opts[:pwd], :host => opts[:host],
  :connect => true, :eventmask => "off")

lsnr = nil
if opts[:view_events] == true
  require 'pp'
  lsnr = Rastman::Manager.new(opts[:login], opts[:pwd], :host => opts[:host])
  lsnr.add_event_hook(:event) { |evt| pp evt; puts }
  lsnr.connect
end

Signal.trap("INT") do
  puts "#{CMD}: Logging off. Please wait for Asterisk to complete the logoff request."
  cmdr.logoff
  lsnr.logoff unless lsnr.nil?
  Signal.trap("INT", "DEFAULT")
end

to = (opts[:recipient].include?("/") ? "": "SIP/") + opts[:recipient]

puts "Starting #{opts[:rounds]} rounds of #{opts[:calls]} calls."
puts "Call delay is #{opts[:calls_delay]} secs."
puts "Round delay is #{opts[:rounds_delay]} secs."
puts

# round loop
(1..opts[:rounds]).each do |round_number|
  puts "Round ##{round_number}: #{opts[:calls]} calls"
  caller_id_prefix = "#{Time.now.strftime "1%M%S"}"
  # calls loop
  (1..opts[:calls]).each do |call_number|
    puts "  Call ##{call_number}"
    cmdr.originate(:channel => to,
    							 :context => opts[:context],
    							 :exten => opts[:exten],
    							 :priority => 1,
    							 :callerid => %|#{caller_id_prefix}#{"%05d" % call_number}|)
    sleep(opts[:calls_delay])
  end
  sleep(opts[:rounds_delay]) unless round_number == opts[:rounds]
end

if lsnr.nil?
  cmdr.logoff
else
  sleep 0.1 while cmdr.connected?
end

#
#  Created by Mathieul on 2007-02-08.
#  Copyright (c) 2007. All rights reserved.
